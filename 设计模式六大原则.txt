设计模式六大原则（1）：单一职责原则：不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。 
	遵循单一职责原的优点有：
		1、可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多；
		2、提高类的可读性，提高系统的可维护性；
		3、变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。

		附：需要说明的一点是单一职责原则不只是面向对象编程思想所特有的，只要是模块化的程序设计，都适用单一职责原则。

设计模式六大原则（2）：里氏替换原则：所有引用基类的地方必须能透明地使用其子类的对象。
	里氏替换原则通俗的来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。它包含以下4层含义：
		1、子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。
		2、子类中可以增加自己特有的方法。
		3、当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。
		4、当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。

设计模式六大原则（3）：依赖倒置原则：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。（相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。）依赖倒置原则的核心思想是面向接口编程。
	传递依赖关系有三种方式：接口传递，构造方法传递和setter方法传递
		在实际编程中，我们一般需要做到如下3点：
			1、低层模块尽量都要有抽象类或接口，或者两者都有。
			2、变量的声明类型尽量是抽象类或接口。
			3、使用继承时遵循里氏替换原则。

设计模式六大原则（4）：接口隔离原则：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。
	接口隔离原则的含义是：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。
	接口是设计时对外部设定的“契约”，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。
	单一职责原则原注重的是职责；而接口隔离原则注重对接口依赖的隔离。其二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，主要针对抽象，针对程序整体框架的构建。

	采用接口隔离原则对接口进行约束时，要注意以下几点：
		1、接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。
		2、为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。
		3、提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。
		4、运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。

设计模式六大原则（5）：迪米特法则：一个对象应该对其他对象保持最少的了解。

	迪米特法则的初衷是降低类之间的耦合，由于每个类都减少了不必要的依赖，因此的确可以降低耦合关系。但是凡事都有度，虽然可以避免与非直接的类通信，但是要通信，必然会通过一个“中介”来发生联系，过分的使用迪米特原则，会产生大量这样的中介和传递类，导致系统复杂度变大。所以在采用迪米特法则时要反复权衡，既做到结构清晰，又要高内聚低耦合。


设计模式六大原则（6）：开闭原则：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。用抽象构建框架，用实现扩展细节。
	当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。
	开闭原则是面向对象设计中最基础的设计原则，它指导我们如何建立稳定灵活的系统。
